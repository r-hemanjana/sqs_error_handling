AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 30
    Architectures:
      - x86_64

Resources:
  # Lambda functions
  ProcessMessage:
    Type: AWS::Serverless::Function
    FunctionName: process-message
    Properties:
      CodeUri: dist/consumer
      Environment:
        Variables:
          QUEUE_URL: !Ref DispatchQueue
      Handler: index.processMessage
      Role: !GetAtt AppRole.Arn

  PushIntoQueue:
    Type: AWS::Serverless::Function
    FunctionName: push-into-queue
    Properties:
      CodeUri: dist/blog
      Environment:
        Variables:
          QUEUE_URL: !Ref DispatchQueue
      Handler: index.pushIntoQueue
      Role: !GetAtt AppRole.Arn

  # Queue
  DispatchQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "test-dispatch-queue"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterForDispatchQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 90

  DeadLetterForDispatchQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "dead-letter-dispatch-queue"
      MessageRetentionPeriod: 604800

  # Mapping of function and queue
  ProcessMessageEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 5
      FunctionResponseTypes: ['ReportBatchItemFailures']
      MaximumBatchingWindowInSeconds: 30
      ScalingConfig:
        MaximumConcurrency: 2
      EventSourceArn: !GetAtt DispatchQueue.Arn
      FunctionName: !GetAtt ProcessMessage.Arn

  # log group
  ProcessMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProcessMessage}'
      RetentionInDays: 1

  PushIntoQueueLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PushIntoQueue}'
      RetentionInDays: 1

  # IAM role
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'app-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allow-sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
              Resource: !GetAtt DispatchQueue.Arn
        - PolicyName: allow-lambda-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
